#!/bin/bash
# Mathematica Virtualization Bootstrap Script 0.1
# Logic:
# Download image through HTTP.  Run with cloud client, injecting public-key for root access
# Use cloud client with template 1, *with cloud credentials*
# SSH into the VM using the public key.
# Create a user account, using keyboard input for the username and password.
# Save VM back to Cumulus.

# Defaults
CLOUD_CLIENT=/opt/nimbus-cloud-client/
INSTALL_DIR=$(mktemp -d)
SCRIPT=`basename $0`
echo "Mathematica Virtual Machine Bootstrap Script."
echo " "


USAGE="Usage:
`basename $0` [-c|--conf custom-cloud.properties] [-h|--help]"

# Parse command line arguments
while [ "$1" != "" ]; do
    case $1 in
        -c | --conf )           shift
                                CUSTOM_CONF=$1
                                ;;
        -h | --help )           echo $USAGE
                                exit
                                ;;
        * )                     echo $USAGE
                                exit 1
    esac
    shift
done


cd $INSTALL_DIR

if [ ! $CUSTOM_CONF ]
	then
		
	# Grab cloud credentials.
	echo "Enter your repository S3id"
	read S3ID
	
	echo "Enter your repository s3key"
	read S3KEY
	
	echo "Enter your repository canonicalid"
	read CANONICALID
	
fi

echo "Enter the new remote username:"
read REMOTE_USER

stty -echo
while printf "Enter the remote user's password: "; do
        read USER_PASSWORD && echo -e "\n"
        printf "Please re-enter the password: "
        read USER_PASSWORD2 && echo -e "\n"
if [ "$USER_PASSWORD" = "$USER_PASSWORD2" ]; then
        break
else
        echo -e "Passwords do not match. Please try again."
fi
done
stty echo

if [ $CUSTOM_CONF ]; then
	CUSTOM_KEY=grep "ssh.pubkey=" $CUSTOM_CONF | sed 's/.*=\(.*\)/\1/'
else
	echo "Generating RSA key..."
	ssh-keygen -N "" -f $INSTALL_DIR/id_rsa
fi


CREDENTIALS="###########################################################################
# Your image repository credentials
###########################################################################

vws.repository.s3id=${S3ID}
vws.repository.s3key=${S3KEY}
vws.repository.canonicalid=${CANONICALID}"


CLOUD_PROPERTIES="###########################################################################
# Path to SSH public key to log in with.
#
# If left blank or deleted, the client will proceed calling the service
# without an SSH just-in-time configuration request. You can override
# using the --ssh-pubkey flag.
###########################################################################

ssh.pubkey=$INSTALL_DIR/id_rsa.pub


###########################################################################
# Path to SSH known_hosts file
#
# If a remote host's SSH public key is made available, the presence of
# this configuration signals the cloud client to replace the corresponding
# IP and/or hostname entry in the SSH known_hosts file.
#
# Only used when you invoke --cluster and use contextualization
#
# You can disable this behavior by leaving blank or deleting.
###########################################################################

ssh.hostsfile=~/.ssh/known_hosts


###########################################################################
# Host+port of the Nimbus central service (not the URL)
###########################################################################

vws.factory=elephant.heprc.uvic.ca:8443


###########################################################################
# Default settings for this Nimbus cloud
###########################################################################

vws.memory.request=256
vws.cores.request=1


###########################################################################
# Host+port of image repository (not the URL)
###########################################################################

vws.repository=elephant.heprc.uvic.ca:8888


###########################################################################
# Virtal Workspace Service identity, to verify we are talking to the
# right machine.
###########################################################################

vws.factory.identity=/C=CA/O=Grid/CN=host/elephant.heprc.uvic.ca


###########################################################################
# Image repository settings
###########################################################################

vws.repository.type=cumulus
vws.repository.s3basekey=VMS
vws.repository.s3bucket=Repo
vws.repository.s3https=false
vws.repository.s3acceptallcerts=false


${CREDENTIALS}

# Extra stuff
vws.metadata.mountAs=sda"



echo "${CLOUD_PROPERTIES}" > cloud.properties

# Download the stock image
echo "Downloading template image..."
wget http://vmrepo.heprc.uvic.ca/Mathematica-VM.img.gz
echo "Done."

# Load the image into the user's personal repository in Cumulus
echo "Transferring image to Cumulus..."
if [ $CUSTOM_CONF ]; then
	$CLOUD_CLIENT/bin/cloud-client.sh --conf $CUSTOM_CONF --transfer --sourcefile ./Mathematica-VM.img.gz
else
	$CLOUD_CLIENT/bin/cloud-client.sh --conf ./cloud.properties --transfer --sourcefile ./Mathematica-VM.img.gz
fi
echo "Done."


# Launch vm.
echo "Launching VM..."
if [ $CUSTOM_CONF ]; then
	$CLOUD_CLIENT/bin/cloud-client.sh --conf $CUSTOM_CONF --run --name Mathematica-VM.img.gz --hours 1 2>&1 | tee runlog.txt
else
	$CLOUD_CLIENT/bin/cloud-client.sh --conf ./cloud.properties --run --name Mathematica-VM.img.gz --hours 1 2>&1 | tee runlog.txt
fi

# Parse output of cloud-client to grab the IP address
IP_ADDRESS=$(cat runlog.txt  | grep IP | awk '{print $3}')
HANDLE=$(cat runlog.txt  | grep Running: | sed s/"'"/" "/g | awk '{print $2}')


i="0"
# if there's an error, $? will be nonzero
if [ $CUSTOM_CONF ]; then
	while [ $i -lt 30 ]; do
		ssh -i $CUSTOM_KEY -o StrictHostKeyChecking=no root@$IP_ADDRESS echo "SSH appears functional."
		if [ $? == "0" ]; then
			break
		else
			sleep 10
			i=$[$i+1]
		fi
	done
else
	while [ $i -lt 30 ]; do
		ssh -i $INSTALL_DIR/id_rsa -o StrictHostKeyChecking=no root@$IP_ADDRESS echo "SSH appears functional."
		if [ $? == "0" ]; then
			break
		else
			sleep 10
			i=$[$i+1]
		fi
	done
fi


if [ $CUSTOM_CONF ]; then
	echo "Adding $REMOTE_USER..."
	ssh -i $CUSTOM_KEY -o StrictHostKeyChecking=no root@$IP_ADDRESS /usr/sbin/adduser $REMOTE_USER
	ssh -i $CUSTOM_KEY -o StrictHostKeyChecking=no root@$IP_ADDRESS passwd $REMOTE_USER<<EOF
	$USER_PASSWORD
	$USER_PASSWORD
	EOF
else
	echo "Adding $REMOTE_USER..."
	ssh -i $INSTALL_DIR/id_rsa -o StrictHostKeyChecking=no root@$IP_ADDRESS /usr/sbin/adduser $REMOTE_USER
	ssh -i $INSTALL_DIR/id_rsa -o StrictHostKeyChecking=no root@$IP_ADDRESS passwd $REMOTE_USER<<EOF
	$USER_PASSWORD
	$USER_PASSWORD
	EOF
fi


# Shutdown-save the virtual machine
echo "Saving VM..."
if [ $CUSTOM_CONF ]; then
	$CLOUD_CLIENT/bin/cloud-client.sh --conf $CUSTOM_CONF --save --handle $HANDLE
else
	$CLOUD_CLIENT/bin/cloud-client.sh --conf ./cloud.properties --save --handle $HANDLE
fi
echo "Done."

# Remove old cloud.properties, write new one without root RSA key
rm cloud.properties

# Write new cloud.properties

CLOUD_PROPERTIES="###########################################################################
# Path to SSH public key to log in with.
#
# If left blank or deleted, the client will proceed calling the service
# without an SSH just-in-time configuration request. You can override
# using the --ssh-pubkey flag.
###########################################################################

#ssh.pubkey=~/.ssh/id_rsa.pub


###########################################################################
# Path to SSH known_hosts file
#
# If a remote host's SSH public key is made available, the presence of
# this configuration signals the cloud client to replace the corresponding
# IP and/or hostname entry in the SSH known_hosts file.
#
# Only used when you invoke --cluster and use contextualization
#
# You can disable this behavior by leaving blank or deleting.
###########################################################################

ssh.hostsfile=~/.ssh/known_hosts


###########################################################################
# Host+port of the Nimbus central service (not the URL)
###########################################################################

vws.factory=elephant.heprc.uvic.ca:8443


###########################################################################
# Default settings for this Nimbus cloud
###########################################################################

vws.memory.request=256
vws.cores.request=1


###########################################################################
# Host+port of image repository (not the URL)
###########################################################################

vws.repository=elephant.heprc.uvic.ca:8888


###########################################################################
# Virtal Workspace Service identity, to verify we are talking to the
# right machine.
###########################################################################

vws.factory.identity=/C=CA/O=Grid/CN=host/elephant.heprc.uvic.ca


###########################################################################
# Image repository settings
###########################################################################

vws.repository.type=cumulus
vws.repository.s3basekey=VMS
vws.repository.s3bucket=Repo
vws.repository.s3https=false
vws.repository.s3acceptallcerts=false


${CREDENTIALS}

# Extra stuff
vws.metadata.mountAs=sda"

echo "${CLOUD_PROPERTIES}" > cloud.properties

if [ ! -d ~/.nimbus/ ]
	then
		mkdir ~/.nimbus
fi


if [ $CUSTOM_CONF ]; then	
	if [ -f ~/.nimbus/cloud.properties ]; then
			
			mv ~/.nimbus/cloud.properties ~/.nimbus/cloud.properties.bak
			echo "Your current ~/.nimbus/cloud.properties has been moved to cloud.properties.bak."
			cp $CUSTOM_CONF ~/.nimbus/cloud.properties
	else
		cp $CUSTOM_CONF ~/.nimbus/cloud.properties
	fi


else
	if [ -f ~/.nimbus/cloud.properties ]; then
			
		mv ~/.nimbus/cloud.properties ~/.nimbus/cloud.properties.bak
		echo "Your current ~/.nimbus/cloud.properties has been moved to cloud.properties.bak."
		cp cloud.properties ~/.nimbus/cloud.properties
	else
		cp cloud.properties ~/.nimbus/cloud.properties
	fi
	
fi


#Remove bootstrap files.
rm -r $INSTALL_DIR









